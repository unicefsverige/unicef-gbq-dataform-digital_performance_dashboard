config {
    type: "incremental",
    schema: constants.STAGING_DATASET,
    description: "conversion level model with ids and with applied attribution",
    tags:["ga4","ga4_daily"],
    bigquery: {
        partitionBy: "date",
        clusterBy: ["ga_session_key"]
    }
}

pre_operations {
  declare date_checkpoint default (
    ${when(incremental(),
      `select max(date) -${constants.DATAFORM_LOOKBACK_WINDOW} from ${self()}`,
      `select cast('${constants.START_DATE}' as date format 'yyyymmdd')`)
    }
  )
  ---
  ${when(incremental(),
    `delete from ${self()} where date >= date_checkpoint`)
  }
}


with conversions as (
    select
        user_key,
        ga_session_key,
        ecommerce.transaction_id as transaction_id,
        transactionId as additional_transaction_id,
        ecommerce.purchase_revenue,
        ecommerce.purchase_revenue_in_usd,
        currency as local_currency,
        paymentType as payment_type,
        fundsDestinations as funds_destinations,

        /*Change values to those used in your GA4 configuration*/
        case 
            when (select item_category from unnest(items) limit 1) = "One time Donation" then "cash"
            when (select item_category from unnest(items) limit 1) = "Monthly Donation" then "pledge"
            when (select item_category from unnest(items) limit 1) is not null then "n/a" 
            else null
            /* In case your GA4 items object is not functioning properly, you can use event_params (if that works better for you)
            example: when donationType = "One-Time Donation" then "cash" */
        end as transaction_type
        
        
        /*Example of how to add metrics other than donations.
        --
        case 
            when event_name = 'legacy_lead' then ga_session_key --use user_key or ga_session_key, depending on how you want to count unique appearances of the metric.
            else null
        end as legacy_lead_id 
        --
        also, don't forget to include the event_name in the WHERE clause below. */

    from ${ref('stg_ga4_events_fixed')}
    where ga_session_key is not null
        and event_date >= date_checkpoint
        and event_name in ("purchase")
    group by all
     
),

attributed_conversions as (
    select 
        c.*,
        s.session_start_date as date,
        s.first_traffic_source,
        s.landing_hostname,
        s.session_device_category as device
    from conversions c 
    left join ${ref('stg_ga4_sessions')} s
        on c.ga_session_key = s.ga_session_key
    where 
        s.session_start_date >= date_checkpoint        
)


select *
from attributed_conversions
--qualify row_number() over (partition by user_key, transaction_id order by s.session_start_date DESC) = 1

